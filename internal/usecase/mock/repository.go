// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "imansohibul.my.id/account-domain-service/entity"
)

// MockTransactionManager is a mock of TransactionManager interface.
type MockTransactionManager struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionManagerMockRecorder
}

// MockTransactionManagerMockRecorder is the mock recorder for MockTransactionManager.
type MockTransactionManagerMockRecorder struct {
	mock *MockTransactionManager
}

// NewMockTransactionManager creates a new mock instance.
func NewMockTransactionManager(ctrl *gomock.Controller) *MockTransactionManager {
	mock := &MockTransactionManager{ctrl: ctrl}
	mock.recorder = &MockTransactionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionManager) EXPECT() *MockTransactionManagerMockRecorder {
	return m.recorder
}

// WithTransaction mocks base method.
func (m *MockTransactionManager) WithTransaction(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockTransactionManagerMockRecorder) WithTransaction(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockTransactionManager)(nil).WithTransaction), ctx, fn)
}

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountRepository) CreateAccount(ctx context.Context, account *entity.Account) (*entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, account)
	ret0, _ := ret[0].(*entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountRepositoryMockRecorder) CreateAccount(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountRepository)(nil).CreateAccount), ctx, account)
}

// FindByAccountNumber mocks base method.
func (m *MockAccountRepository) FindByAccountNumber(ctx context.Context, accountType entity.AccountType, accountNumber string, lock bool) (*entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAccountNumber", ctx, accountType, accountNumber, lock)
	ret0, _ := ret[0].(*entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAccountNumber indicates an expected call of FindByAccountNumber.
func (mr *MockAccountRepositoryMockRecorder) FindByAccountNumber(ctx, accountType, accountNumber, lock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAccountNumber", reflect.TypeOf((*MockAccountRepository)(nil).FindByAccountNumber), ctx, accountType, accountNumber, lock)
}

// UpdateAccount mocks base method.
func (m *MockAccountRepository) UpdateAccount(ctx context.Context, account *entity.Account) (*entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", ctx, account)
	ret0, _ := ret[0].(*entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockAccountRepositoryMockRecorder) UpdateAccount(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockAccountRepository)(nil).UpdateAccount), ctx, account)
}

// MockCustomerRepository is a mock of CustomerRepository interface.
type MockCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryMockRecorder
}

// MockCustomerRepositoryMockRecorder is the mock recorder for MockCustomerRepository.
type MockCustomerRepositoryMockRecorder struct {
	mock *MockCustomerRepository
}

// NewMockCustomerRepository creates a new mock instance.
func NewMockCustomerRepository(ctrl *gomock.Controller) *MockCustomerRepository {
	mock := &MockCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepository) EXPECT() *MockCustomerRepositoryMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockCustomerRepository) CreateCustomer(ctx context.Context, customer *entity.Customer) (*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", ctx, customer)
	ret0, _ := ret[0].(*entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockCustomerRepositoryMockRecorder) CreateCustomer(ctx, customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockCustomerRepository)(nil).CreateCustomer), ctx, customer)
}

// FindByPhoneNumber mocks base method.
func (m *MockCustomerRepository) FindByPhoneNumber(ctx context.Context, phoneNumber string) (*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPhoneNumber", ctx, phoneNumber)
	ret0, _ := ret[0].(*entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPhoneNumber indicates an expected call of FindByPhoneNumber.
func (mr *MockCustomerRepositoryMockRecorder) FindByPhoneNumber(ctx, phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPhoneNumber", reflect.TypeOf((*MockCustomerRepository)(nil).FindByPhoneNumber), ctx, phoneNumber)
}

// MockCustomerIdentityRepository is a mock of CustomerIdentityRepository interface.
type MockCustomerIdentityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerIdentityRepositoryMockRecorder
}

// MockCustomerIdentityRepositoryMockRecorder is the mock recorder for MockCustomerIdentityRepository.
type MockCustomerIdentityRepositoryMockRecorder struct {
	mock *MockCustomerIdentityRepository
}

// NewMockCustomerIdentityRepository creates a new mock instance.
func NewMockCustomerIdentityRepository(ctrl *gomock.Controller) *MockCustomerIdentityRepository {
	mock := &MockCustomerIdentityRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerIdentityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerIdentityRepository) EXPECT() *MockCustomerIdentityRepositoryMockRecorder {
	return m.recorder
}

// CreateCustomerIdentity mocks base method.
func (m *MockCustomerIdentityRepository) CreateCustomerIdentity(ctx context.Context, customerIdentity *entity.CustomerIdentity) (*entity.CustomerIdentity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomerIdentity", ctx, customerIdentity)
	ret0, _ := ret[0].(*entity.CustomerIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomerIdentity indicates an expected call of CreateCustomerIdentity.
func (mr *MockCustomerIdentityRepositoryMockRecorder) CreateCustomerIdentity(ctx, customerIdentity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomerIdentity", reflect.TypeOf((*MockCustomerIdentityRepository)(nil).CreateCustomerIdentity), ctx, customerIdentity)
}

// FindByIdentity mocks base method.
func (m *MockCustomerIdentityRepository) FindByIdentity(ctx context.Context, identityType entity.CustomerIdentityType, identityNumber string) (*entity.CustomerIdentity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIdentity", ctx, identityType, identityNumber)
	ret0, _ := ret[0].(*entity.CustomerIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdentity indicates an expected call of FindByIdentity.
func (mr *MockCustomerIdentityRepositoryMockRecorder) FindByIdentity(ctx, identityType, identityNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdentity", reflect.TypeOf((*MockCustomerIdentityRepository)(nil).FindByIdentity), ctx, identityType, identityNumber)
}

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionRepository) CreateTransaction(ctx context.Context, transaction *entity.Transaction) (*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, transaction)
	ret0, _ := ret[0].(*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionRepositoryMockRecorder) CreateTransaction(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).CreateTransaction), ctx, transaction)
}
