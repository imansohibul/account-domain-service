// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
	entity "imansohibul.my.id/account-domain-service/entity"
)

// MockCreateAccountUsecase is a mock of CreateAccountUsecase interface.
type MockCreateAccountUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateAccountUsecaseMockRecorder
}

// MockCreateAccountUsecaseMockRecorder is the mock recorder for MockCreateAccountUsecase.
type MockCreateAccountUsecaseMockRecorder struct {
	mock *MockCreateAccountUsecase
}

// NewMockCreateAccountUsecase creates a new mock instance.
func NewMockCreateAccountUsecase(ctrl *gomock.Controller) *MockCreateAccountUsecase {
	mock := &MockCreateAccountUsecase{ctrl: ctrl}
	mock.recorder = &MockCreateAccountUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateAccountUsecase) EXPECT() *MockCreateAccountUsecaseMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockCreateAccountUsecase) CreateAccount(ctx context.Context, params *entity.CreateAccountParams) (*entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, params)
	ret0, _ := ret[0].(*entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockCreateAccountUsecaseMockRecorder) CreateAccount(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockCreateAccountUsecase)(nil).CreateAccount), ctx, params)
}

// MockGetBalanceUsecase is a mock of GetBalanceUsecase interface.
type MockGetBalanceUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockGetBalanceUsecaseMockRecorder
}

// MockGetBalanceUsecaseMockRecorder is the mock recorder for MockGetBalanceUsecase.
type MockGetBalanceUsecaseMockRecorder struct {
	mock *MockGetBalanceUsecase
}

// NewMockGetBalanceUsecase creates a new mock instance.
func NewMockGetBalanceUsecase(ctrl *gomock.Controller) *MockGetBalanceUsecase {
	mock := &MockGetBalanceUsecase{ctrl: ctrl}
	mock.recorder = &MockGetBalanceUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetBalanceUsecase) EXPECT() *MockGetBalanceUsecaseMockRecorder {
	return m.recorder
}

// GetBalance mocks base method.
func (m *MockGetBalanceUsecase) GetBalance(ctx context.Context, accountNumber string) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, accountNumber)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockGetBalanceUsecaseMockRecorder) GetBalance(ctx, accountNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockGetBalanceUsecase)(nil).GetBalance), ctx, accountNumber)
}

// MockDepositUsecase is a mock of DepositUsecase interface.
type MockDepositUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockDepositUsecaseMockRecorder
}

// MockDepositUsecaseMockRecorder is the mock recorder for MockDepositUsecase.
type MockDepositUsecaseMockRecorder struct {
	mock *MockDepositUsecase
}

// NewMockDepositUsecase creates a new mock instance.
func NewMockDepositUsecase(ctrl *gomock.Controller) *MockDepositUsecase {
	mock := &MockDepositUsecase{ctrl: ctrl}
	mock.recorder = &MockDepositUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDepositUsecase) EXPECT() *MockDepositUsecaseMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockDepositUsecase) Deposit(ctx context.Context, accountNumber string, amount decimal.Decimal) (*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, accountNumber, amount)
	ret0, _ := ret[0].(*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit.
func (mr *MockDepositUsecaseMockRecorder) Deposit(ctx, accountNumber, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockDepositUsecase)(nil).Deposit), ctx, accountNumber, amount)
}

// MockWithdrawUsecase is a mock of WithdrawUsecase interface.
type MockWithdrawUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawUsecaseMockRecorder
}

// MockWithdrawUsecaseMockRecorder is the mock recorder for MockWithdrawUsecase.
type MockWithdrawUsecaseMockRecorder struct {
	mock *MockWithdrawUsecase
}

// NewMockWithdrawUsecase creates a new mock instance.
func NewMockWithdrawUsecase(ctrl *gomock.Controller) *MockWithdrawUsecase {
	mock := &MockWithdrawUsecase{ctrl: ctrl}
	mock.recorder = &MockWithdrawUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawUsecase) EXPECT() *MockWithdrawUsecaseMockRecorder {
	return m.recorder
}

// Withdraw mocks base method.
func (m *MockWithdrawUsecase) Withdraw(ctx context.Context, accountNumber string, amount decimal.Decimal) (*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, accountNumber, amount)
	ret0, _ := ret[0].(*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockWithdrawUsecaseMockRecorder) Withdraw(ctx, accountNumber, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockWithdrawUsecase)(nil).Withdraw), ctx, accountNumber, amount)
}
